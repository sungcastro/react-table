/* 
  * Methods and Properties
*/

* filter() : The filter() method creates a new array with all elements that pass the test implemented by the provided function.
             filter() calls a provided callback function once for each element in an array, and constructs a new array of all the values for which callback returns a value that coerces to true.

    var words = ['spay', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
    
    const result = word.filter(word => word.length > 6);
    
    console.log(restult);
    // output : Array [''exuberant', 'destruction', 'present']; 

    The previous example is the same as : 

    var words = ['spay', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

    const result = words.filter(function(word){
        return word.length > 6;
    });

    console.log(restult);
    // output : Array [''exuberant', 'destruction', 'present'];

    <!--  --> 
    
    function isBigEnough(value) {
    return value >= 10;
    }

    var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
    // filtered is [12, 130, 44]


* indexOf() : The indexOf() method returns the position of the first occurrence of a specified value in a string.
              This method returns -1 if the value to search for never occurs.
              Note: The indexOf() method is case sensitive.    
             
              SyntaxSection
              string.indexOf(searchvalue, start)
              searchvalue:	Required. The string to search for
              start:	    Optional. Default 0. At which position to start the search

      var fruits = ["Banana", "Orange", "Apple", "Mango", "Banana", "Orange", "Apple", "Mango"];

      const fruit = fruits.indexOf("Apple");

      console.log(fruit);
      // output : 2; 

      <!-- -->   
      
      var sentence = "Hello world, welcome to the universe.";

      const str = sentence.indexOf("welcome");
      console.log(str);
      // output : 13;   


 * Object.keys() : The Object.keys() method returns an array of a given object's own property names, in the same order that we get with                   a normal loop.
 
       const object1 = {
       a: 'somestring',
       b: 42,
       c: false
     };

     console.log(Object.keys(object1));
     // expected output: Array ["a", "b", "c"]

     // simple array
     var arr = ['a', 'b', 'c'];
     console.log(Object.keys(arr)); 
     // console: ['0', '1', '2']

* Object properties :  There are different ways to access an object property.
                       objectName.property
                       or
                       objectName["property"]   
                       or
                       objectName[expression]
        var person = {
         firstname:"John",
         lastname:"Doe",
         age:50,
         eyecolor:"blue"
       };
       console.log(person.firsname);
       // Output: Jhon;

       <!-- -->   
        var person = {
        firstname:"John",
        lastname:"Doe",
        age:50,
        eyecolor:"blue"
      };
       console.log(person["firstname"])
     // Output: Jhon;

* Computed property names : It allows you to have an expression be computed as a property name on an object.

        var param = 'size';
        var config = {
          [param]: 12,
          ['mobile' + param.charAt(0).toUpperCase() + param.slice(1)]: 4
        };

        console.log(config); 
        // Output {size: 12, mobileSize: 4}

      <!-- -->
        var fruit_var = 'fruit'
        var eatables = {[fruit_var]: 'Apple', vegetable: 'Carrot'}
        console.log(eatables) 
        // Output {fruit: 'Apple', vegetable: 'Carrot'}


